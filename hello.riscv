  .text
  .globl main
main:

  # prologue
  addi sp, sp, -32
entry:

  # alloc

  # binary
  li t0, 2
  xor t1, t0, x0
  seqz t1, t1
  sw t1, 4(sp)

  # branch
  lw t0, 4(sp)
  bnez  t0, then_0
  j     else_0
then_0:

  # alloc

  # binary
  li t0, 6
  xor t1, t0, x0
  snez t1, t1
  sw t1, 12(sp)

  # branch
  lw t0, 12(sp)
  bnez  t0, then_1
  j     else_1
else_0:

  # store
  li t0, 1
  sw t0, 0(sp)

  # jump
  j     end_0
then_1:

  # binary
  li t0, 12
  xor t1, t0, x0
  snez t1, t1
  sw t1, 16(sp)

  # store
  lw t0, 16(sp)
  sw t0, 8(sp)

  # jump
  j     end_1
else_1:

  # store
  sw x0, 8(sp)

  # jump
  j     end_1
end_0:

  # load
  lw t0, 0(sp)
  sw t0, 20(sp)

  # ret
  li t0, 3
  mv a0, t0

  # epilogue
  addi sp, sp, 32
  ret
end_1:

  # load
  lw t0, 8(sp)
  sw t0, 24(sp)

  # binary
  li t0, 1
  xor t1, t0, x0
  snez t1, t1
  sw t1, 28(sp)

  # store
  lw t0, 28(sp)
  sw t0, 0(sp)

  # jump
  j     end_0
