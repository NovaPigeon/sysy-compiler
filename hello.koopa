decl @getint(): i32
decl @getch(): i32
decl @getarray(*i32): i32
decl @putint(i32)
decl @putch(i32)
decl @putarray(i32, *i32)
decl @starttime()
decl @stoptime()
global @ga = alloc [i32, 10], zeroinit
global @gb = alloc [[i32, 3], 2], {{5, 6, 7}, {8, 0, 0}}
fun @main(): i32 {
%entry_main:
  @a_0 = alloc [i32, 10]
  @b_0 = alloc [[i32, 3], 2]
  store {{1, 2, 3}, {4, 0, 0}}, @b_0
  @sum_0 = alloc i32
  store 0, @sum_0
  @i_0 = alloc i32
  store 0, @i_0
  jump %while_entry_0

%while_entry_0:
  %0 = load @i_0
  %1 = lt %0, 2
  br %1, %while_body_0, %end_0

%while_body_0:
  @j_0_0 = alloc i32
  store 0, @j_0_0
  jump %while_entry_1

%while_entry_1:
  %2 = load @j_0_0
  %3 = lt %2, 3
  br %3, %while_body_1, %end_1

%while_body_1:
  %4 = load @sum_0
  %5 = load @i_0
  %6 = load @j_0_0
  %7 = getelemptr @b_0, %5
  %8 = getelemptr %7, %6
  %9 = load %8
  %10 = add %4, %9
  %11 = load @i_0
  %12 = load @j_0_0
  %13 = getelemptr @gb, %11
  %14 = getelemptr %13, %12
  %15 = load %14
  %16 = add %10, %15
  store %16, @sum_0
  %17 = load @j_0_0
  %18 = add %17, 1
  store %18, @j_0_0
  jump %while_entry_1

%end_1:
  %19 = load @i_0
  %20 = add %19, 1
  store %20, @i_0
  jump %while_entry_0

%end_0:
  store 0, @i_0
  jump %while_entry_2

%while_entry_2:
  %21 = load @i_0
  %22 = lt %21, 10
  br %22, %while_body_2, %end_2

%while_body_2:
  %23 = load @sum_0
  %24 = load @i_0
  %25 = add %23, %24
  %26 = load @i_0
  %27 = getelemptr @a_0, %26
  store %25, %27
  %28 = load @sum_0
  %29 = load @i_0
  %30 = add %28, %29
  %31 = load @i_0
  %32 = getelemptr @ga, %31
  store %30, %32
  %33 = load @i_0
  %34 = add %33, 1
  store %34, @i_0
  jump %while_entry_2

%end_2:
  %35 = load @sum_0
  ret %35
}
